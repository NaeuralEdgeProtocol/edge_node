#!/bin/bash
###
### This script replaces the authorized addresses list with a batch of new addresses
### Each input line should be in format: <address> [alias]
### Input is read from stdin, one address per line
### Validates that there are no duplicate addresses or aliases
###
### Example:
### cat allowed_addresses.txt | docker exec -i <container> update_allowed_batch
###
### allowed_addresses.txt:
### <node-address1> <alias1>
### <node-address2> <alias2>
### ...
###

MAX_ALIAS_LENGTH=15
FILE=/edge_node/_local_cache/authorized_addrs

# Create a temporary file
TEMP_FILE=$(mktemp)

# Arrays to store addresses and aliases for duplicate checking
declare -A used_values

# Read input line by line and check for duplicates
while IFS= read -r line; do
    # Skip empty lines
    if [ -z "$line" ]; then
        continue
    fi

    # Split line into address and alias
    read -r address alias <<< "$line"

    # Truncate alias if it's longer than MAX_ALIAS_LENGTH
    if [ -n "$alias" ] && [ ${#alias} -gt $MAX_ALIAS_LENGTH ]; then
        echo "Warning: Alias '$alias' exceeds $MAX_ALIAS_LENGTH characters, truncating to '${alias:0:$MAX_ALIAS_LENGTH}'" >&2
        alias="${alias:0:$MAX_ALIAS_LENGTH}"
    fi

    # Check if address is already used (as either address or alias)
    if [ -n "${used_values[$address]}" ]; then
        echo "Error: Value '$address' already used as ${used_values[$address]}" >&2
        rm "$TEMP_FILE"
        exit 1
    fi

    # Check if alias is already used (as either address or alias)
    if [ -n "$alias" ] && [ -n "${used_values[$alias]}" ]; then
        echo "Error: Value '$alias' already used as ${used_values[$alias]}" >&2
        rm "$TEMP_FILE"
        exit 1
    fi

    # Store both values with their roles for duplicate checking
    used_values[$address]="address"
    if [ -n "$alias" ]; then
        used_values[$alias]="alias"
    fi

    # Write valid line to temp file with potentially truncated alias
    if [ -n "$alias" ]; then
        echo "$address $alias" >> "$TEMP_FILE"
    else
        echo "$address" >> "$TEMP_FILE"
    fi
done

# Only replace the original file if we have at least one valid entry
if [ -s "$TEMP_FILE" ]; then
    mv "$TEMP_FILE" "$FILE"
    sleep 3
    get_node_info
else
    echo "Error: No valid entries provided" >&2
    rm "$TEMP_FILE"
    exit 1
fi
